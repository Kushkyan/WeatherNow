import requests
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
import logging
import re

# –ù–∞—Å—Ç—Ä–æ–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format='%(asctime)s - %(message)s', level=logging.INFO)
logger = logging.getLogger()

# –í–∞—à–∏ –∫–ª—é—á–∏ API
OPENWEATHER_API_KEY = 'b03fe07dd50b94b37d91876507a1e844'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –∫–ª—é—á
TELEGRAM_API_KEY = '7857736836:AAG4gEIsgOhG_0moVfOxT7j_4Df38DIpcBY'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –∫–ª—é—á

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–≥–æ–¥–æ–π –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
def get_weather_emoji(description):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–≥–æ–¥—ã."""
    if "—è—Å–Ω–æ" in description or "—á–∏—Å—Ç–æ–µ" in description:
        return "‚òÄÔ∏è"
    elif "–æ–±–ª–∞—á–Ω–æ" in description or "–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å" in description:
        return "üå§"
    elif "–¥–æ–∂–¥—å" in description:
        return "üåß"
    elif "—Å–Ω–µ–≥" in description:
        return "‚ùÑÔ∏è"
    elif "—Ç—É–º–∞–Ω" in description or "–¥—ã–º–∫–∞" in description:
        return "üå´"
    else:
        return "üå§"

def month_to_name(month, case='nom'):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è –º–µ—Å—è—Ü–∞ –≤ –Ω—É–∂–Ω–æ–º –ø–∞–¥–µ–∂–µ."""
    month_names = {
        'nom': ["–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å", "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"],
        'gen': ["–Ø–Ω–≤–∞—Ä—è", "–§–µ–≤—Ä–∞–ª—è", "–ú–∞—Ä—Ç–∞", "–ê–ø—Ä–µ–ª—è", "–ú–∞—è", "–ò—é–Ω—è", "–ò—é–ª—è", "–ê–≤–≥—É—Å—Ç–∞", "–°–µ–Ω—Ç—è–±—Ä—è", "–û–∫—Ç—è–±—Ä—è", "–ù–æ—è–±—Ä—è", "–î–µ–∫–∞–±—Ä—è"]
    }
    return month_names[case][month - 1]

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
today_date = datetime.now()
date_formatted = f"{today_date.day} {month_to_name(today_date.month, 'gen')}"


def get_weather_data(latitude, longitude):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥–µ –∏ –ø—Ä–æ–≥–Ω–æ–∑–µ —Å OpenWeatherMap API."""
    url_current = f'http://api.openweathermap.org/data/2.5/weather?lat={latitude}&lon={longitude}&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru'
    url_forecast = f'http://api.openweathermap.org/data/2.5/forecast?lat={latitude}&lon={longitude}&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru'

    current_response = requests.get(url_current).json()
    forecast_response = requests.get(url_forecast).json()

    return current_response, forecast_response

def get_day_suffix(days):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –¥–Ω—è –ø—Ä–æ–≥–Ω–æ–∑–∞."""
    if days == 0:
        return "–°–µ–≥–æ–¥–Ω—è"
    elif days == 1:
        return "–ó–∞–≤—Ç—Ä–∞"
    elif days in [2, 3, 4]:
        return f"—á–µ—Ä–µ–∑ {days} –¥–Ω—è"
    else:
        return f"—á–µ—Ä–µ–∑ {days} –¥–Ω–µ–π"

import re

def dms_to_decimal(degrees, minutes, seconds, direction):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ DMS (–≥—Ä–∞–¥—É—Å—ã, –º–∏–Ω—É—Ç—ã, —Å–µ–∫—É–Ω–¥—ã) –≤ –¥–µ—Å—è—Ç–∏—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç."""
    decimal = degrees + minutes / 60 + seconds / 3600
    if direction in ['S', 'W']:
        decimal *= -1
    return decimal

def parse_coordinates(text):
    """–ü–∞—Ä—Å–∏—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–∞—Ö DD.DDDD –∏ DMS."""
    pattern_decimal = r"(-?\d+\.\d+),\s*(-?\d+\.\d+)"
    pattern_dms = r"(\d+)¬∞(\d+)'(\d+\.\d+)[\"‚Ä≤‚Ä≥]\s*([NSEW]),\s*(\d+)¬∞(\d+)'(\d+\.\d+)[\"‚Ä≤‚Ä≥]\s*([NSEW])"

    match_decimal = re.match(pattern_decimal, text)
    match_dms = re.match(pattern_dms, text)

    if match_decimal:
        latitude = float(match_decimal.group(1))
        longitude = float(match_decimal.group(2))
        return latitude, longitude
    elif match_dms:
        lat_deg = int(match_dms.group(1))
        lat_min = int(match_dms.group(2))
        lat_sec = float(match_dms.group(3))
        lat_dir = match_dms.group(4)

        lon_deg = int(match_dms.group(5))
        lon_min = int(match_dms.group(6))
        lon_sec = float(match_dms.group(7))
        lon_dir = match_dms.group(8)

        latitude = dms_to_decimal(lat_deg, lat_min, lat_sec, lat_dir)
        longitude = dms_to_decimal(lon_deg, lon_min, lon_sec, lon_dir)
        return latitude, longitude

    return None


def get_temperature_emoji(feels_like):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—â—É—â–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã."""
    if feels_like >= 30:
        return "ü•µ"  # –û—á–µ–Ω—å —Ç–µ–ø–ª–æ (30¬∞C –∏ –≤—ã—à–µ)
    elif feels_like >= 20:
        return "üåû"  # –¢–µ–ø–ª–æ (–æ—Ç 20¬∞C –¥–æ 29¬∞C)
    elif feels_like >= 10:
        return "ü§ó"  # –£–º–µ—Ä–µ–Ω–Ω–æ (–æ—Ç 10¬∞C –¥–æ 19¬∞C)
    else:
        return "ü•∂"  # –•–æ–ª–æ–¥–Ω–æ (–Ω–∏–∂–µ 10¬∞C)
def day_of_week_in_russian(day_of_week):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."""
    days = {
        "Monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        "Tuesday": "–í—Ç–æ—Ä–Ω–∏–∫",
        "Wednesday": "–°—Ä–µ–¥–∞",
        "Thursday": "–ß–µ—Ç–≤–µ—Ä–≥",
        "Friday": "–ü—è—Ç–Ω–∏—Ü–∞",
        "Saturday": "–°—É–±–±–æ—Ç–∞",
        "Sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
    }
    return days[day_of_week]

def create_current_weather_message(current_data):
    """–°–æ–∑–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥–µ."""
    description = current_data["weather"][0]["description"].capitalize()
    weather_emoji = get_weather_emoji(description)
    temperature = int(current_data["main"]["temp"])
    wind_speed = round(current_data["wind"]["speed"], 1)
    humidity = current_data["main"]["humidity"]
    pressure = current_data["main"]["pressure"]
    rain = round(current_data.get("rain", {}).get("1h", 0), 1)
    rain = f"{rain:.1f}"

    feels_like = int(current_data["main"]["feels_like"])
    temperature_emoji = get_temperature_emoji(feels_like)

    today_date = datetime.now()
    date_formatted = f"{today_date.day} {month_to_name(today_date.month, 'gen')}"
    current_time = today_date.strftime("%H:%M")
    day_of_week = day_of_week_in_russian(today_date.strftime('%A'))

    sunrise = datetime.fromtimestamp(current_data["sys"]["sunrise"]).strftime("%H:%M")
    sunset = datetime.fromtimestamp(current_data["sys"]["sunset"]).strftime("%H:%M")

    current_weather_message = (
        f"üü¢ –°–µ–π—á–∞—Å: {current_time}, {date_formatted}, {day_of_week}\n\n"
        f"{weather_emoji} {description}\n"
        f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:    {temperature}¬∞C\n"
        f"{temperature_emoji} –û—â—É—â–∞–µ—Ç—Å—è:       {feels_like}¬∞C\n"
        f"üí® –í–µ—Ç–µ—Ä:                 {wind_speed:.1f} –º/—Å\n"
        f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å:        {humidity}%\n"
        f"üóú –î–∞–≤–ª–µ–Ω–∏–µ:          {pressure} –≥–ü–∞\n"
        f"üåß –û—Å–∞–¥–∫–∏:               {rain} –º–º\n"
        f"üåÖ –í–æ—Å—Ö–æ–¥:               {sunrise}\n"
        f"üåÑ –ó–∞–∫–∞—Ç:                  {sunset}\n"
    )
    return current_weather_message

def create_forecast_message(forecast_data):
    """–°–æ–∑–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥–Ω–æ–∑–µ –ø–æ–≥–æ–¥—ã."""
    forecast_lines = []
    current_date = datetime.now().date()

    daily_forecast = {}

    for item in forecast_data["list"]:
        dt = datetime.strptime(item["dt_txt"], "%Y-%m-%d %H:%M:%S")
        date = dt.date()
        if date >= current_date:  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è
            if date not in daily_forecast:
                daily_forecast[date] = {
                    "temp_min": int(item["main"]["temp_min"]),
                    "temp_max": int(item["main"]["temp_max"]),
                    "wind_speed": round(item["wind"]["speed"], 1),
                    "rain": round(item.get("rain", {}).get("3h", 0), 1)
                }
            else:
                daily_forecast[date]["temp_min"] = min(daily_forecast[date]["temp_min"], int(item["main"]["temp_min"]))
                daily_forecast[date]["temp_max"] = max(daily_forecast[date]["temp_max"], int(item["main"]["temp_max"]))
                daily_forecast[date]["wind_speed"] = max(daily_forecast[date]["wind_speed"], round(item["wind"]["speed"], 1))
                daily_forecast[date]["rain"] += round(item.get("rain", {}).get("3h", 0), 1)

    for date, forecast in daily_forecast.items():
        day = date.day
        month_name = month_to_name(date.month, 'gen')
        description = forecast_data["list"][0]["weather"][0]["description"].capitalize()
        emoji = get_weather_emoji(description)
        temp_min = forecast["temp_min"]
        temp_max = forecast["temp_max"]
        wind_speed = forecast["wind_speed"]
        rain = f"{forecast['rain']:.1f}"  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Å–∞–¥–∫–æ–≤ –≤ —Å—Ç—Ä–æ–∫—É —Å 1 –∑–Ω–∞–∫–æ–º –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
        rain_status = f"{rain} –º–º"

        days_ahead = (date - current_date).days
        suffix = get_day_suffix(days_ahead)
        day_of_week = day_of_week_in_russian(date.strftime('%A'))

        forecast_lines.append(
            f"{suffix} {emoji} {temp_max}¬∞ {temp_min}¬∞\n"
            f"{day} {month_name}, {day_of_week}\n"
            f"–í–µ—Ç–µ—Ä: {wind_speed:.1f} –º/—Å, –û—Å–∞–¥–∫–∏: {rain_status}"
        )

    forecast_message = "üü† –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ –ø—è—Ç—å –¥–Ω–µ–π:\n\n" + "\n\n".join(forecast_lines)
    return forecast_message


async def start(update: Update, context: CallbackContext):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    logger.info("–ë–æ—Ç –ø–æ–ª—É—á–∏–ª –∫–æ–º–∞–Ω–¥—É /start")
    await update.message.reply_text(
    "üëã –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ª–æ–∫–∞—Ü–∏—é! (‚Üíüìé‚Üí –≥–µ–æ–ø–æ–∑–∏—Ü–∏—è)\n üó∫Ô∏è –ò–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –ø—Ä–∏–º–µ—Ä—ã: \n üëâ 40.792574, 43.846909 –∏–ª–∏ 40¬∞47'33.3\"N, 43¬∞50'48.9\"E\n üìç–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –ª—é–±—É—é —Ç–æ—á–∫—É –Ω–∞—à–µ–π –ø–ª–∞–Ω–µ—Ç—ã!"
)

def parse_coordinates(text):
    """–ü–∞—Ä—Å–∏—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–∞—Ö DD.DDDD –∏ DMS."""
    pattern_decimal = r"(-?\d+\.?\d*)\s*(-?\d+\.?\d*)"
    pattern_dms = r"(\d+)¬∞(\d+)'(\d+\.\d+)[\"‚Ä≤‚Ä≥]\s*([NSEW]),\s*(\d+)¬∞(\d+)'(\–¥+\.\–¥+)[\"‚Ä≤‚Ä≥]\—Å*([NSEW])"

    match_decimal = re.match(pattern_decimal, text)
    match_dms = re.match(pattern_dms, text)

    if match_decimal:
        latitude = float(match_decimal.group(1))
        longitude = float(match_decimal.group(2))
        return latitude, longitude
    elif match_dms:
        lat_deg = int(match_dms.group(1))
        lat_min = int(match_dms.group(2))
        lat_sec = float(match_dms.group(3))
        lat_dir = match_dms.group(4)

        lon_deg = int(match_dms.group(5))
        lon_min = int(match_dms.group(6))
        lon_sec = float(match_dms.group(7))
        lon_dir = match_dms.group(8)

        latitude = dms_to_decimal(lat_deg, lat_min, lat_sec, lat_dir)
        longitude = dms_to_decimal(lon_deg, lon_min, lon_sec, lon_dir)
        return latitude, longitude

    return None

async def handle_message(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏."""
    text = update.message.text
    coordinates = parse_coordinates(text)
    if coordinates:
        latitude, longitude = coordinates
        current_data, forecast_data = get_weather_data(latitude, longitude)

        current_weather_message = create_current_weather_message(current_data)
        forecast_message = create_forecast_message(forecast_data)
        
        await update.message.reply_text(current_weather_message)
        await update.message.reply_text(forecast_message)
    else:
        await update.message.reply_text("üôè–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–ø—Ä–∏–º–µ—Ä—ã üëâ 40.792574, 43.846909 –∏–ª–∏ 40¬∞47'33.3\"N, 43¬∞50'48.9\"E).")

async def handle_location(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_location = update.message.location
    latitude = user_location.latitude
    longitude = user_location.longitude

    logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {latitude}, {longitude}")

    current_data, forecast_data = get_weather_data(latitude, longitude)

    current_weather_message = create_current_weather_message(current_data)
    forecast_message = create_forecast_message(forecast_data)

    await update.message.reply_text(current_weather_message)
    await update.message.reply_text(forecast_message)

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    application = Application.builder().token(TELEGRAM_API_KEY).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.LOCATION, handle_location))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    application.run_polling()

if __name__ == '__main__':
    main()
